#!/usr/bin/env bash
set -euo pipefail

# Define 'appname'
appname="BlitzClean"

# Define 'binaryname'
binaryname="blitzclean"

# Define 'entryfile'
entryfile="main.py"

# Define 'scriptdir'
scriptdir="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

cd "$scriptdir"
pythonmain="${1:-$entryfile}"

if [[ ! -f "$pythonmain" ]];
then
    candidates=($(ls -1 *.py 2>/dev/null || true))
    [[ ${#candidates[@]} -eq 1 ]] && pythonmain="${candidates[0]}"
fi

[[ -f "$pythonmain" ]] || { echo "Can't find main file. Use: ./build path/to/main.py"; exit 1; }

# Version extraction
versraw="$(grep -E '^[[:space:]]*VERSION[[:space:]]*=' "$pythonmain" | head -n1 | sed -E 's/.*"[[:space:]]*([^"]+)[[:space:]]*".*/\1/')"
versdeb="$(echo "${versraw:-v0.0}" | sed -E 's/[^0-9.]+//g')"; [[ -n "$versdeb" ]] || versdeb="0.0.0"

# Arch
arch="$(dpkg --print-architecture 2>/dev/null || echo amd64)"

# Clean build env
rm -rf build dist .pyinstaller .venv_build
mkdir -p dist build/hooks
echo ">>> Cleaned previous build artifacts."

# Build venv + deps
python3 -m venv .venv_build
source .venv_build/bin/activate
python -m pip install --upgrade pip wheel
pip install "pyinstaller" "pyqt6" "pyqt6-sip"

# Runtime hook to point Qt at our bundled plugins
runtimehook="build/hooks/qt_plugin_path.py"
cat > "$runtimehook" <<'PY'
import os, sys
base = getattr(sys, "_MEIPASS", None)
if base:
    qtp = os.path.join(base, "qt_plugins")
    os.environ["QT_PLUGIN_PATH"] = qtp + os.pathsep + os.environ.get("QT_PLUGIN_PATH", "")
PY

# Resolve PyQt6 WHEEL paths (NOT system Qt)
pyqt_plugins="$(python - <<'PY'
import PyQt6, pathlib
qt_dir = pathlib.Path(PyQt6.__file__).with_name("Qt6")
print(qt_dir.joinpath("plugins"))
PY
)"

pyqt_qtlib="$(python - <<'PY'
import PyQt6, pathlib
qt_dir = pathlib.Path(PyQt6.__file__).with_name("Qt6")
print(qt_dir.joinpath("lib"))
PY
)"

if [[ -z "$pyqt_plugins" || ! -d "$pyqt_plugins" ]];
then
    echo "ERROR: Could not locate PyQt6 wheel plugins directory."
    echo "Looked for site-packages/PyQt6/Qt6/plugins"
    exit 1
fi

declare -a dataload=()

# Platforms plugin dir (xcb etc.) from the WHEEL
if [[ -d "$pyqt_plugins/platforms" ]];
then
    dataload+=( "--add-data" "$pyqt_plugins/platforms:qt_plugins/platforms" )
fi

# Copy ONLY from the WHEEL and prune TIFF
needimage=(qpng qjpeg qico)
tmpimgdir="build/qt_img_min"
rm -rf "$tmpimgdir"; mkdir -p "$tmpimgdir"
for p in "${needimage[@]}";
do
    src="$pyqt_plugins/imageformats/lib${p}.so"
    [[ -f "$src" ]] && cp -a "$src" "$tmpimgdir/"
done

# Ensure we did copy at least one plugin
if compgen -G "$tmpimgdir/lib*.so" > /dev/null;
then
    dataload+=( "--add-data" "$tmpimgdir:qt_plugins/imageformats" )
fi

# Optional harmless if present
if [[ -d "$pyqt_plugins/iconengines" ]];
then
    dataload+=( "--add-data" "$pyqt_plugins/iconengines:qt_plugins/iconengines" )
fi

# Optional icon
iconpath=""
if [[ -f "assets/images/blitzclean.png" ]];
then
    iconpath="assets/images/blitzclean.png"
elif [[ -f "$(dirname "$pythonmain")/assets/images/blitzclean.png" ]];
then
    iconpath="$(dirname "$pythonmain")/assets/images/blitzclean.png"
fi

# PyInstaller minimal Qt stack, exclude noisy modules
pythonopts=(
  --noconfirm
  --clean
  --name "$binaryname"
  --onefile
  --windowed

  # Make PyInstaller prefer the PyQt6 WHEEL Qt libs (avoid system Qt)
  --paths "$pyqt_qtlib"

  # Only what we need:
  --hidden-import PyQt6.QtCore
  --hidden-import PyQt6.QtGui
  --hidden-import PyQt6.QtWidgets

  # Exclude unused stacks that trigger missing-deps warnings
  --exclude-module PyQt6.Qt3DCore
  --exclude-module PyQt6.Qt3DRender
  --exclude-module PyQt6.Qt3DInput
  --exclude-module PyQt6.Qt3DLogic
  --exclude-module PyQt6.Qt3DAnimation
  --exclude-module PyQt6.Qt3DExtras
  --exclude-module PyQt6.Qt3DQuick
  --exclude-module PyQt6.Qt3DQuickScene2D
  --exclude-module PyQt6.QtHelp
  --exclude-module PyQt6.QtScxml
  --exclude-module PyQt6.QtQml
  --exclude-module PyQt6.QtQmlCore
  --exclude-module PyQt6.QtQmlNetwork
  --exclude-module PyQt6.QtQuick
  --exclude-module PyQt6.QtQuickControls2
  --exclude-module PyQt6.QtQuick3D
  --exclude-module PyQt6.QtWebEngineCore
  --exclude-module PyQt6.QtWebView
  --exclude-module PyQt6.QtSql

  --runtime-hook "$runtimehook"
  "${dataload[@]}"
)

[[ -n "$iconpath" ]] && pythonopts+=( --icon "$iconpath" --add-data "$iconpath:." )

echo ">>> Building portable binaryâ€¦"
pyinstaller "${pythonopts[@]}" "$pythonmain"

portablebin="dist/${binaryname}"
[[ -f "dist/${binaryname}/${binaryname}" ]] && { mv "dist/${binaryname}/${binaryname}" "$portablebin"; rmdir "dist/${binaryname}" || true; }
[[ -f "$portablebin" ]] || { echo "Build failed: binary not found"; exit 1; }
chmod +x "$portablebin"
echo ">>> Portable binary ready at: $portablebin"

# Build .deb
pkgroot="build/pkgroot"
pathdebian="$pkgroot/DEBIAN"
pathbinary="$pkgroot/usr/local/bin"
pathpixmaps="$pkgroot/usr/share/pixmaps"
pathdesktop="$pkgroot/usr/share/applications"

mkdir -p "$pathdebian" "$pathbinary" "$pathpixmaps" "$pathdesktop"
install -m 0755 "$portablebin" "$pathbinary/${binaryname}"
[[ -n "$iconpath" ]] && install -m 0644 "$iconpath" "$pathpixmaps/${binaryname}.png"

cat > "$pathdesktop/${binaryname}.desktop" <<EOF
[Desktop Entry]
Type=Application
Name=${appname}
GenericName=System Cleanup
Comment=Ubuntu cleanup GUI for caches, logs, snaps and more
Exec=${binaryname}
TryExec=${binaryname}
Icon=${binaryname}
Terminal=false
Categories=System;Utility;
StartupNotify=true
Keywords=cleanup;cache;system;maintenance;ubuntu;
EOF

devname="$(git config user.name 2>/dev/null || echo 'NeosLab')"
devmail="$(git config user.email 2>/dev/null || echo 'info@neoslab.com')"
cat > "$pathdebian/control" <<EOF
Package: ${binaryname}
Version: ${versdeb}
Section: utils
Priority: optional
Architecture: ${arch}
Maintainer: ${devname} <${devmail}>
Description: ${appname} - Ubuntu Cleanup GUI (portable binary)
 Provides a PyQt6 GUI to reclaim disk space, tidy caches/logs, and manage system cleanup tasks.
EOF

find "$pkgroot" -type d -print0 | xargs -0 chmod 0755
chmod 0644 "$pathdesktop/${binaryname}.desktop" "$pathdebian/control" || true
debname="dist/${binaryname}_${versdeb}_${arch}.deb"
dpkg-deb --build "$pkgroot" "$debname" >/dev/null

echo
echo "================= BUILD SUMMARY ================="
echo "Portable executable : $portablebin"
echo "Debian package      : $debname"
echo "Version             : ${versraw:-N/A}  (deb: $versdeb)"
echo "Qt plugins (wheel)  : $pyqt_plugins"
echo "Qt libs (wheel)     : $pyqt_qtlib"
echo "================================================="
